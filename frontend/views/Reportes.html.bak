<style>
  .page-title{font-weight:600;font-size:16px;margin-bottom:12px}
</style>

<div id="ReportesView"></div>
<script type="text/babel">
  const { useState, useEffect, useMemo, useRef } = React;
  const { Tabs, Table, Card, message, Button, Row, Col, Input, Select, Statistic, Space, Tag, Collapse } = antd;

  function Reportes(){
    // ===== Compartir por correo (modal) =====
    const [emailModal, setEmailModal] = useState({ open:false, tipo:null, to:'', pdfBase64:'', pdfUrl:'', sending:false, fileName:'' });

    async function openEmailModalVentas(){
      try{
        setEmailModal(prev => ({ ...prev, open:true, tipo:'ventas', sending:true, to:'' }));
        const filtros = filtrosV || {};
        const meta = { tituloBarberia, usuario: usuarioActual };
        const res = await EmailShare.getPdfBase64('ventas', filtros, meta);
        let url = '';
        if (res.base64){ url = EmailShare.base64ToBlobUrl(res.base64, 'application/pdf'); }
        else if (res.fileUrl){ url = res.fileUrl; }
        setEmailModal({ open:true, tipo:'ventas', to:'', pdfBase64:res.base64||'', pdfUrl:url, sending:false, fileName: (res.fileName || 'Reporte_Ventas.pdf') });
      }catch(err){
        console.error(err);
        setEmailModal(prev => ({ ...prev, open:false, sending:false }));
        message.error('No se pudo generar el PDF de ventas');
      }
    }

    async function openEmailModalGastos(){
      try{
        setEmailModal(prev => ({ ...prev, open:true, tipo:'gastos', sending:true, to:'' }));
        const filtros = buildFiltrosG();
        const meta = { tituloBarberia, usuario: usuarioActual };
        const res = await EmailShare.getPdfBase64('gastos', filtros, meta);
        let url = '';
        if (res.base64){ url = EmailShare.base64ToBlobUrl(res.base64, 'application/pdf'); }
        else if (res.fileUrl){ url = res.fileUrl; }
        setEmailModal({ open:true, tipo:'gastos', to:'', pdfBase64:res.base64||'', pdfUrl:url, sending:false, fileName: (res.fileName || 'Reporte_Gastos.pdf') });
      }catch(err){
        console.error(err);
        setEmailModal(prev => ({ ...prev, open:false, sending:false }));
        message.error('No se pudo generar el PDF de gastos');
      }
    }

    async function handleSendEmail(){
      try{
        const to = (emailModal.to || '').trim();
        if (!to){ message.warning('Ingresa un correo destino'); return; }
        setEmailModal(prev => ({ ...prev, sending:true }));
        const subject = (tituloBarberia ? (String(tituloBarberia)+' - ') : '') + (emailModal.tipo==='gastos' ? 'Reporte de gastos' : 'Reporte de ventas');
        const htmlBody = 'Se adjunta el reporte en formato PDF.';
        await EmailShare.sendEmailGmail({ to, subject, htmlBody, filename: emailModal.fileName || (emailModal.tipo==='gastos'?'Reporte_Gastos.pdf':'Reporte_Ventas.pdf'), base64: emailModal.pdfBase64 });
        setEmailModal({ open:false, tipo:null, to:'', pdfBase64:'', pdfUrl:'', sending:false, fileName:'' });
        message.success('Correo enviado correctamente');
      }catch(err){
        console.error(err);
        setEmailModal(prev => ({ ...prev, sending:false }));
        message.error('Error al enviar el correo');
      }
    }

    // ===== Ventas =====
    const [loadingVentas, setLoadingVentas] = useState(false);
    const [ventas, setVentas] = useState([]);
    const [activeKey, setActiveKey] = useState('ventas');

    const mountedRef = useRef(false);
    const debounceRef = useRef({});
    const timersRef = useRef([]);

    useEffect(() => {
      mountedRef.current = true;
      return () => {
        mountedRef.current = false;
        try{ Object.values(debounceRef.current || {}).forEach(id => clearTimeout(id)); }catch(e){}
        try{ (timersRef.current || []).forEach(id => clearTimeout(id)); }catch(e){}
      };
    }, []);

    function fromCache(){
      try{
        const raw = sessionStorage.getItem('repVentas');
        if (raw){
          const arr = JSON.parse(raw);
          if (Array.isArray(arr)) setVentas(arr);
        }
      }catch(e){}
    }
    function fetchVentas(){
      setLoadingVentas(true);
      try{
        if (google && google.script && google.script.run){
          google.script.run
            .withSuccessHandler(function(res){
              if (!mountedRef.current) return;
              try{
                const r = (typeof res === 'string') ? JSON.parse(res) : res;
                if (r && r.ok && Array.isArray(r.data)){
                  sessionStorage.setItem('repVentas', JSON.stringify(r.data));
                  setVentas(r.data);
                } else {
                  message.warning('No se encontraron ningun registros.');
                }
              }catch(e){}
              setLoadingVentas(false);
            })
            .withFailureHandler(function(err){
              if (!mountedRef.current) return;
              setLoadingVentas(false);
              message.error(String((err && err.message) || err || 'Error al cargar'));
            })
            .bootstrapReportesVentas();
        } else { setLoadingVentas(false); }
      }catch(e){ setLoadingVentas(false); }
    }

    // ===== Gastos =====
    const [loadingGastos, setLoadingGastos] = useState(false);
    const [gastos, setGastos] = useState([]);
    const [resumenG, setResumenG] = useState(null);
    const [sucursales, setSucursales] = useState([]);
    const [usuarioActual, setUsuarioActual] = useState('N/D');

    const yearNow = new Date().getFullYear();
    const monthNow = new Date().getMonth() + 1;

    const [filtrosG, setFiltrosG] = useState({
      periodo: 'anual',
      anio: yearNow,
      mes: monthNow,
      quincena: 1,
      fechaRef: new Date().toISOString().slice(0,10),
      nombreSucursal: '',
      q: ''
    });

    // Filtros para VENTAS (misma UI que Gastos)
    const [filtrosV, setFiltrosV] = useState({
      periodo: 'anual',
      anio: yearNow,
      mes: monthNow,
      quincena: 1,
      fechaRef: new Date().toISOString().slice(0,10),
      nombreSucursal: '',
      q: ''
    });

    function resetFiltrosV(){
      const defaults = {
        periodo: 'anual',
        anio: yearNow,
        mes: monthNow,
        quincena: 1,
        fechaRef: new Date().toISOString().slice(0,10),
        nombreSucursal: '',
        q: ''
      };
      setFiltrosV(defaults);
    }


    

    const [tituloBarberia, setTituloBarberia] = useState('BarberÃ­a');

    const currency = (n) => {
      try{
        return 'L.' + new Intl.NumberFormat('es-HN', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(Number(n||0));
      }catch(e){ return 'L.' + Number(n||0).toFixed(2); }
    };

    function endOfMonth(y, m){ return new Date(y, m, 0).getDate(); }
    function ymd(d){
  const y = d.getFullYear();
  const m = String(d.getMonth()+1).padStart(2,'0');
  const dd = String(d.getDate()).padStart(2,'0');
  return `${y}-${m}-${dd}`;
}
    function _norm(s){ return String(s||'').normalize('NFD').replace(/[\u0300-\u036f]/g,'').toLowerCase(); }
    function _parseYmd(s){ try{ const [y,m,d] = String(s||'').split('-').map(Number); return new Date(y, m-1, d); }catch(e){ return null; } }


    function debouncedFetch(key, overrides, delay=350){
      try{
        if (debounceRef.current[key]) clearTimeout(debounceRef.current[key]);
        debounceRef.current[key] = setTimeout(()=>{ fetchGastos(overrides); }, delay);
      }catch(e){}
    }

    function resetFiltros(){
      const defaults = {
        periodo: 'anual',
        anio: new Date().getFullYear(),
        mes: (new Date().getMonth()+1),
        quincena: 1,
        fechaRef: new Date().toISOString().slice(0,10),
        nombreSucursal: '',
        q: ''
      };
      setFiltrosG(defaults);
      fetchGastos(defaults);
    }

    function buildFiltrosG(overrides){
      const F = { ...filtrosG, ...(overrides||{}) };
      const p = F.periodo || 'anual';
      const out = { nombreSucursal: F.nombreSucursal || '', q: F.q || '' };
      const y = Number(F.anio || 0) || new Date().getFullYear();

      if (p === 'anual'){ out.anio = y; }
      else if (p === 'mensual'){ const m = Number(F.mes||0) || monthNow; out.anio = y; out.mes = m; }
      else if (p === 'quincenal'){
        const m = Number(F.mes||0) || monthNow; const q = Number(F.quincena||1)===2 ? 2 : 1;
        const start = new Date(y, m-1, q===1?1:16, 0,0,0);
        const endDay = q===1 ? 15 : endOfMonth(y, m);
        const end = new Date(y, m-1, endDay, 23,59,59);
        out.desde = ymd(start); out.hasta = ymd(end);
      } else if (p === 'semanal'){
        const ref = F.fechaRef ? new Date(F.fechaRef) : new Date();
        const d = new Date(ref.getFullYear(), ref.getMonth(), ref.getDate());
        const day = d.getDay(); const diffToMon = (day === 0 ? -6 : 1 - day);
        const mon = new Date(d); mon.setDate(d.getDate() + diffToMon);
        const sun = new Date(mon); sun.setDate(mon.getDate() + 6); sun.setHours(23,59,59,0);
        out.desde = ymd(mon); out.hasta = ymd(sun);
      } else if (p === 'diario'){
        const ref = F.fechaRef ? new Date(F.fechaRef) : new Date();
        const start = new Date(ref.getFullYear(), ref.getMonth(), ref.getDate(), 0,0,0);
        const end = new Date(ref.getFullYear(), ref.getMonth(), ref.getDate(), 23,59,59);
        out.desde = ymd(start); out.hasta = ymd(end);
      }
      return out;
    }

    function fetchSucursales(){
      function setSucursalNames(names){
        try{
          const arr = Array.from(new Set((names || []).filter(Boolean)))
            .sort((a,b)=> a.localeCompare(b,'es',{sensitivity:'base'}));
          if (arr.length && mountedRef.current) setSucursales(arr);
        }catch(e){}
      }
      try{
        if (google && google.script && google.script.run){
          google.script.run
            .withSuccessHandler(function(res){
              if (!mountedRef.current) return;
              try{
                const r = (typeof res === 'string') ? JSON.parse(res) : res;
                let names = [];
                if (r && r.ok && Array.isArray(r.sucursales)){
                  if (typeof r.sucursales[0] === 'string'){ names = r.sucursales; }
                  else { names = r.sucursales.map(x => x && (x.nombreSucursal || x.sucursal || x.Sucursal)).filter(Boolean); }
                }
                setSucursalNames(names);
                if (!names || !names.length){
                  google.script.run
                    .withSuccessHandler(function(res2){
                      if (!mountedRef.current) return;
                      try{
                        const r2 = (typeof res2 === 'string') ? JSON.parse(res2) : res2;
                        let names2 = [];
                        if (r2 && r2.ok && Array.isArray(r2.sucursales)){
                          if (typeof r2.sucursales[0] === 'string'){ names2 = r2.sucursales; }
                          else { names2 = r2.sucursales.map(s => s && (s.nombreSucursal || s.sucursal || s.Sucursal)).filter(Boolean); }
                        }
                        setSucursalNames(names2);
                        if ((!names2 || !names2.length) && mountedRef.current){
                          const raw = sessionStorage.getItem('repGastos');
                          const obj = raw ? JSON.parse(raw) : null;
                          const list = (obj && Array.isArray(obj.list)) ? obj.list : (Array.isArray(gastos) ? gastos : []);
                          const derivadas = Array.from(new Set((list || []).map(g => g && g.nombreSucursal).filter(Boolean)));
                          setSucursalNames(derivadas);
                        }
                      }catch(e){}
                    })
                    .withFailureHandler(function(err){})
                    .listarSucursalesActivas();
                }
              }catch(e){}
            })
            .withFailureHandler(function(err){
              if (!mountedRef.current) return;
              google.script.run
                .withSuccessHandler(function(res2){
                  if (!mountedRef.current) return;
                  try{
                    const r2 = (typeof res2 === 'string') ? JSON.parse(res2) : res2;
                    let names2 = [];
                    if (r2 && r2.ok && Array.isArray(r2.sucursales)){
                      if (typeof r2.sucursales[0] === 'string'){ names2 = r2.sucursales; }
                      else { names2 = r2.sucursales.map(s => s && (s.nombreSucursal || s.sucursal || s.Sucursal)).filter(Boolean); }
                    }
                    setSucursalNames(names2);
                  }catch(e){}
                })
                .withFailureHandler(function(err2){})
                .listarSucursalesActivas();
            })
            .listarSucursalesGastos();
        }
      }catch(e){}
    }

    function fetchUsuarioActual(){
      try{
        if (google && google.script && google.script.run){
          google.script.run
            .withSuccessHandler(function(res){
              if (!mountedRef.current) return;
              try{
                const r = (typeof res === 'string') ? JSON.parse(res) : res;
                if (r && r.ok) setUsuarioActual(r.email || 'N/D');
              }catch(e){}
            })
            .withFailureHandler(function(err){})
            .obtenerUsuarioActual();
        }
      }catch(e){}
    }

    function fromCacheG(){
      try{
        const raw = sessionStorage.getItem('repGastos');
        if (!raw) return;
        const obj = JSON.parse(raw);
        if (obj && Array.isArray(obj.list)){
          setGastos(obj.list);
          setResumenG(obj.resumen || null);
        }
      }catch(e){}
    }
    function saveCacheG(list, resumen){
      try{ sessionStorage.setItem('repGastos', JSON.stringify({ list, resumen })); }catch(e){}
    }

    function fetchGastos(overrides){
      setLoadingGastos(true);
      try{
        if (google && google.script && google.script.run){
          const payload = buildFiltrosG(overrides);
          google.script.run
            .withSuccessHandler(function(res){
              if (!mountedRef.current) return;
              setLoadingGastos(false);
              try{
                const r = (typeof res === 'string') ? JSON.parse(res) : res;
                if (r && r.ok && r.data && Array.isArray(r.data.list)){
                  setGastos(r.data.list);
                  setResumenG(r.data.resumen || null);
                  saveCacheG(r.data.list, r.data.resumen || null);
                } else {
                  message.info('Sin datos para los filtros seleccionados.');
                  setGastos([]); setResumenG(null); saveCacheG([], null);
                }
              }catch(e){}
            })
            .withFailureHandler(function(err){
              if (!mountedRef.current) return;
              setLoadingGastos(false);
              message.error(String((err && err.message) || err || 'Error al cargar gastos'));
            })
            .bootstrapReportesGastos(payload);
        } else { setLoadingGastos(false); }
      }catch(e){ setLoadingGastos(false); }
    }

    
    // Descargar PDF (Ventas - LITE)
    function handleDownloadPDFVentas(){
      try{
        const rows = Array.isArray(ventasFiltradas) ? ventasFiltradas : [];
        const title = (tituloBarberia ? (String(tituloBarberia)+' - ') : '') + 'Reporte de ventas';
        const dateStr = new Date().toLocaleString('es-HN');
        const htmlRows = rows.map((r,i)=>(
          `<tr>
             <td style="padding:6px;border:1px solid #eee;text-align:right;">${r.n||i+1}</td>
             <td style="padding:6px;border:1px solid #eee;">${r.fecha||''}</td>
             <td style="padding:6px;border:1px solid #eee;">${(r.descripcion||'').toString()}</td>
             <td style="padding:6px;border:1px solid #eee;text-align:right;">${Number(r.cantidad||0)}</td>
             <td style="padding:6px;border:1px solid #eee;text-align:right;">L.${Number(r.precio||0).toFixed(2)}</td>
             <td style="padding:6px;border:1px solid #eee;text-align:right;">L.${Number(r.total_linea||0).toFixed(2)}</td>
             <td style="padding:6px;border:1px solid #eee;">${r.metodo_pago||''}</td>
           </tr>`
        )).join('');
        const html = `<!doctype html>
<html><head><meta charset="utf-8"><title>${title}</title>
<style>
  body{font-family:Arial,Helvetica,sans-serif; font-size:12px; color:#111;}
  h1{font-size:18px;margin:0 0 6px 0}
  .meta{font-size:11px;color:#666;margin-bottom:10px}
  table{border-collapse:collapse;width:100%}
  thead th{border:1px solid #ddd;background:#f6f6f6;padding:6px;text-align:left}
  tbody td{padding:6px;border:1px solid #eee}
  @page{size:auto;margin:12mm}
</style></head>
<body>
  <h1>${title}</h1>
  <div class="meta">Generado: ${dateStr}</div>
  <table>
    <thead>
      <tr>
        <th style="width:40px;text-align:right">N.</th>
        <th style="width:90px">Fecha</th>
        <th>DescripciÃ³n</th>
        <th style="width:60px;text-align:right">Cant.</th>
        <th style="width:80px;text-align:right">Precio</th>
        <th style="width:100px;text-align:right">Total lÃ­nea</th>
        <th style="width:130px">MÃ©todo de pago</th>
      </tr>
    </thead>
    <tbody>${htmlRows}</tbody>
  </table>
</body></html>`;
        const w = window.open('', '_blank');
        if (!w){ message.error('Bloqueado por el navegador'); return; }
        w.document.open(); w.document.write(html); w.document.close();
        w.focus();
        const safeClose = function(){ try{ w.close(); }catch(e){} };
        w.onload = function(){
          try{ w.print(); setTimeout(safeClose, 300); }catch(e){ safeClose(); }
        };
      }catch(e){ message.error('No se pudo preparar el PDF'); }
    }
// Descargar PDF (LITE)
    function handleDownloadPDF(){
      try{
        if (google && google.script && google.script.run){
          const filtros = buildFiltrosG();
          const meta = { tituloBarberia, usuario: usuarioActual }; // sin logoUrl
          google.script.run
            .withSuccessHandler(function(res){
              if (!mountedRef.current) return;
              try{
                const r = (typeof res === 'string') ? JSON.parse(res) : res;
                if (!r || !r.ok){ message.error((r && r.message) || 'No se pudo generar el PDF'); return; }
                if (r.base64){
                  const url = 'data:application/pdf;base64,' + r.base64;
                  fetch(url).then(x=>x.blob()).then(blob=>{
                    const a = document.createElement('a');
                    a.href = URL.createObjectURL(blob);
                    a.download = `Reporte_Gastos.pdf`;
                    a.click();
                    URL.revokeObjectURL(a.href);
                  });
                } else if (r.fileUrl){
                  window.open(r.fileUrl, '_blank');
                }
                message.success('PDF generado correctamente.');
              }catch(e){ message.error('Error al procesar PDF'); }
            })
            .withFailureHandler(function(err){
              if (!mountedRef.current) return;
              message.error('Error al generar PDF');
            })
            .generarReporteGastosPDF_Lite(filtros, meta);
        }
      }catch(e){}
    }

    // Cargas iniciales
    useEffect(function(){
      fromCache();
      const hasCache = !!sessionStorage.getItem('repVentas');
      if (!hasCache){ fetchVentas(); }
      else { const id = setTimeout(fetchVentas, 120); timersRef.current.push(id); }

      fetchSucursales();
      fromCacheG();
      fetchGastos();
      fetchUsuarioActual();
    }, []);

    useEffect(function(){
      if (!sucursales.length && Array.isArray(gastos) && gastos.length){
        const names = Array.from(new Set(gastos.map(g => g && g.nombreSucursal).filter(Boolean)))
          .sort((a,b)=> a.localeCompare(b,'es',{sensitivity:'base'}));
        if (names.length) setSucursales(names);
      }
    }, [gastos]);

        // ===== Columnas =====
    const colsVentas = useMemo(function(){
      return [
        { title:'N.', dataIndex:'n', key:'n', width:80, align:'center', sorter:function(a,b){return Number(a.n||0)-Number(b.n||0);} },
        { title:'Fecha', dataIndex:'fecha', key:'fecha', width:120 },
        { title:'DescripciÃ³n', dataIndex:'descripcion', key:'descripcion', ellipsis:true },
        { title:'Cant.', dataIndex:'cantidad', key:'cantidad', width:90, align:'right' },
        { title:'Precio', dataIndex:'precio', key:'precio', width:110, align:'right', render:function(v){ return 'L.'+Number(v||0).toFixed(2); } },
        { title:'Total lÃ­nea', dataIndex:'total_linea', key:'total_linea', width:130, align:'right', render:function(v){ return 'L.'+Number(v||0).toFixed(2); } },
        { title:'MÃ©todo de pago', dataIndex:'metodo_pago', key:'metodo_pago', width:160 }
      ];
    }, []);

    // Lista filtrada en cliente (periodo, sucursal, texto)
    const ventasFiltradas = useMemo(() => {
      try{
        const F = filtrosV || {};
        const p = F.periodo || 'anual';
        const y = Number(F.anio||0) || new Date().getFullYear();
        const m = Number(F.mes||0) || (new Date().getMonth()+1);
        const q = Number(F.quincena||1)===2 ? 2 : 1;
        const ref = F.fechaRef ? new Date(F.fechaRef) : new Date();

        let desde = null, hasta = null;
        if (p==='anual'){ desde = new Date(y,0,1,0,0,0); hasta = new Date(y,11,31,23,59,59); }
        else if (p==='mensual'){ desde = new Date(y,m-1,1,0,0,0); hasta = new Date(y,m-1,endOfMonth(y,m),23,59,59); }
        else if (p==='quincenal'){
          const startDay = (q===1)?1:16;
          const endDay = (q===1)?15:endOfMonth(y,m);
          desde = new Date(y,m-1,startDay,0,0,0);
          hasta = new Date(y,m-1,endDay,23,59,59);
        } else if (p==='semanal'){
          const d = new Date(ref.getFullYear(), ref.getMonth(), ref.getDate());
          const day = d.getDay(); const diffToMon = (day === 0 ? -6 : 1 - day);
          const mon = new Date(d); mon.setDate(d.getDate() + diffToMon);
          const sun = new Date(mon); sun.setDate(mon.getDate() + 6); sun.setHours(23,59,59,0);
          desde = mon; hasta = sun;
        } else if (p==='diario'){
          desde = new Date(ref.getFullYear(), ref.getMonth(), ref.getDate(), 0,0,0);
          hasta = new Date(ref.getFullYear(), ref.getMonth(), ref.getDate(), 23,59,59);
        }

        const qtxt = _norm(F.q||'');
        const sucSel = String(F.nombreSucursal||'').trim();

        return (ventas||[]).filter(it => {
          const f = _parseYmd(it && it.fecha);
          if (!f) return false;
          if (desde && f < desde) return false;
          if (hasta && f > hasta) return false;

          if (sucSel && String(it.sucursal||'').trim() !== sucSel) return false;

          if (qtxt){
            const blob = _norm(it.descripcion||'');
            if (blob.indexOf(qtxt) === -1) return false;
          }
          return true;
        });
      }catch(e){ return ventas||[]; }
    }, [ventas, filtrosV]);

    const colsGastos = useMemo(() => ([
      { title: 'Fecha', dataIndex: 'fecha', key: 'fecha', width: 110 },
      { title: 'CategorÃ­a', dataIndex: 'categoria', key: 'categoria', width: 140, render: (v) => v ? <Tag>{v}</Tag> : '-' },
      { title: 'DescripciÃ³n', dataIndex: 'descripcion', key: 'descripcion' },
      { title: 'Monto', dataIndex: 'monto', key: 'monto', align: 'right', width: 120, render: (v) => <strong>{currency(v)}</strong> },
      { title: 'MÃ©todo de pago', dataIndex: 'metodoPago', key: 'metodoPago', width: 140 },
      { title: 'Proveedor', dataIndex: 'proveedor', key: 'proveedor', width: 160 },
      { title: 'Sucursal', dataIndex: 'nombreSucursal', key: 'nombreSucursal', width: 140 },
      { title: 'Comprobante', dataIndex: 'comprobanteURL', key: 'comprobanteURL', width: 120, render: (v) => v ? <a href={v} target="_blank" rel="noreferrer">Ver</a> : '-' },
    ]), []);

    const KPIsG = useMemo(() => {
      const r = resumenG || {};
      return [
        { label: 'Total', value: currency(r.total || 0) },
        { label: 'Registros', value: String(r.registros || 0) },
        { label: 'Prom. mensual', value: currency(r.promedioMensual || 0) },
      ];
    }, [resumenG]);

    const periodOptions = useMemo(()=>[
      { label:'Anual', value:'anual' },
      { label:'Mensual', value:'mensual' },
      { label:'Quincenal', value:'quincenal' },
      { label:'Semanal', value:'semanal' },
      { label:'Diario', value:'diario' },
    ], []);
    const monthOptions = useMemo(()=>[
      {value:1,label:'Enero'},{value:2,label:'Febrero'},{value:3,label:'Marzo'},{value:4,label:'Abril'},
      {value:5,label:'Mayo'},{value:6,label:'Junio'},{value:7,label:'Julio'},{value:8,label:'Agosto'},
      {value:9,label:'Septiembre'},{value:10,label:'Octubre'},{value:11,label:'Noviembre'},{value:12,label:'Diciembre'}
    ], []);

    const showMes = filtrosG.periodo === 'mensual' || filtrosG.periodo === 'quincenal';
    const showQuincena = filtrosG.periodo === 'quincenal';
    const showFechaRef = filtrosG.periodo === 'semanal' || filtrosG.periodo === 'diario';

    return (
      <div>
        <div className="page-title">Reportes</div>
        <antd.Modal
          title="Compartir por correo"
          open={emailModal.open}
          onCancel={()=>setEmailModal(prev=>({ ...prev, open:false }))}
          width={960}
          footer={[
            <Button key="cancel" onClick={()=>setEmailModal(prev=>({ ...prev, open:false }))}>Cancelar</Button>,
            <Button key="send" type="primary" loading={emailModal.sending} disabled={!emailModal.pdfBase64 || !emailModal.to} onClick={handleSendEmail}>Enviar</Button>
          ]}
        >
          <div style={{ marginBottom: 12 }}>
            <label>Correo destino</label>
            <Input
              type="email"
              value={emailModal.to}
              placeholder="usuario@gmail.com"
              onChange={(e)=>setEmailModal(prev=>({ ...prev, to:e.target.value }))}
            />
          </div>
          <div style={{ border:'1px solid #eee', height: '70vh' }}>
            {emailModal.pdfUrl ? (
              <iframe src={emailModal.pdfUrl} title="Vista previa" style={{ width:'100%', height:'100%', border:0 }} />
            ) : (
              <div style={{ padding:16 }}>Generando vista previa...</div>
            )}
          </div>
        </antd.Modal>

        <Tabs activeKey={activeKey} onChange={setActiveKey}>
          {/* ===== Tab Ventas ===== */}
          <Tabs.TabPane tab="Reporte de ventas" key="ventas">
            <Card size="small" extra={<Button onClick={fetchVentas}>Refrescar</Button>}>
            {/* FILTROS (iguales a gastos) */}
            <Collapse defaultActiveKey={[] } style={{ marginBottom: 12 }}>
              <Collapse.Panel header="Filtros" key="filtrosV" extra={<span><Button onClick={openEmailModalVentas} style={{marginRight:8}}>Compartir por correo</Button><Button onClick={openEmailModalVentas} style={{marginRight:8}}>Compartir por correo</Button><Button onClick={handleDownloadPDFVentas}>Descargar PDF</Button></span>}>
                <Card size="small">
                  <Row gutter={[12,12]} align="middle">
                    <Col xs={24} md={6}>
                      <label>Periodo</label>
                      <Select
                        style={{ width:'100%' }}
                        value={filtrosV.periodo}
                        onChange={(v)=>{ setFiltrosV(prev=>({ ...prev, periodo:v })); }}
                        options={periodOptions}
                      />
                    </Col>

                    <Col xs={24} md={6}>
                      <label>AÃ±o</label>
                      <Input
                        type="number"
                        value={filtrosV.anio}
                        min={2000} max={2100}
                        onChange={(e)=>{ const val=Number(e.target.value||0); setFiltrosV(p=>({ ...p, anio: val })); }}
                        onPressEnter={()=>{}}
                      />
                    </Col>

                    {/* Controles condicionales como en gastos */}
                    { (filtrosV.periodo==='mensual' || filtrosV.periodo==='quincenal') && (
                      <Col xs={24} md={6}>
                        <label>Mes</label>
                        <Select
                          style={{ width:'100%' }}
                          value={filtrosV.mes}
                          onChange={(v)=>{ const val=Number(v); setFiltrosV(p=>({ ...p, mes: val })); }}
                          options={[
                            {value:1,label:'Enero'},{value:2,label:'Febrero'},{value:3,label:'Marzo'},{value:4,label:'Abril'},
                            {value:5,label:'Mayo'},{value:6,label:'Junio'},{value:7,label:'Julio'},{value:8,label:'Agosto'},
                            {value:9,label:'Septiembre'},{value:10,label:'Octubre'},{value:11,label:'Noviembre'},{value:12,label:'Diciembre'}
                          ]}
                        />
                      </Col>
                    )}

                    { filtrosV.periodo==='quincenal' && (
                      <Col xs={24} md={6}>
                        <label>Quincena</label>
                        <Select
                          style={{ width:'100%' }}
                          value={filtrosV.quincena}
                          onChange={(v)=> setFiltrosV(p=>({ ...p, quincena: Number(v)===2?2:1 }))}
                          options={[{label:'1a (1-15)',value:1},{label:'2a (16-fin)',value:2}]}
                        />
                      </Col>
                    )}

                    { (filtrosV.periodo==='semanal' || filtrosV.periodo==='diario') && (
                      <Col xs={24} md={6}>
                        <label>Fecha de referencia</label>
                        <Input
                          type="date"
                          value={filtrosV.fechaRef}
                          onChange={(e)=>{ const val=e.target.value; setFiltrosV(p=>({ ...p, fechaRef: val })); }}
                          onPressEnter={()=>{}}
                        />
                      </Col>
                    )}

                    <Col xs={24} md={8}>
                      <label>Sucursal</label>
                      <Select
                        allowClear
                        style={{ width:'100%' }}
                        value={filtrosV.nombreSucursal||undefined}
                        onChange={(v)=> setFiltrosV(p=>({ ...p, nombreSucursal: v||'' }))}
                        options={(sucursales||[]).map(s => ({ value: s, label: s }))}
                        placeholder="Todas"
                      />
                    </Col>

                    <Col xs={24} md={8}>
                      <label>BÃºsqueda</label>
                      <Input
                        placeholder="DescripciÃ³n"
                        value={filtrosV.q}
                        onChange={(e)=> setFiltrosV(p=>({ ...p, q: e.target.value||'' }))}
                        onPressEnter={()=>{}}
                      />
                    </Col>
                  </Row>
                
                    <Col xs={24}>
                      <Space>
                        <Button type="primary" onClick={()=>fetchVentas()} loading={loadingVentas}>Actualizar</Button>
                        <Button onClick={openEmailModalVentas} style={{marginRight:8}}>Compartir por correo</Button><Button onClick={handleDownloadPDFVentas}>Descargar PDF</Button>
                        <Button onClick={resetFiltrosV} danger ghost>Borrar filtros</Button>
                      </Space>
                    </Col>
</Card>
              </Collapse.Panel>
            </Collapse>
    
              <Table
                size="middle"
                rowKey={function(_,i){ return 'rv-'+i; }}
                columns={colsVentas}
                dataSource={ventasFiltradas}
                loading={loadingVentas}
                pagination={{ pageSize: 10, showSizeChanger:true }}
                scroll={{ x: 800 }}
              />
            </Card>
          </Tabs.TabPane>

          {/* ===== Tab Gastos ===== */}
          <Tabs.TabPane tab="Reporte de gastos" key="gastos">
            {/* KPIs */}
            <Row gutter={[12,12]} style={{ marginBottom: 12 }}>
              {KPIsG.map(k => (
                <Col xs={24} md={8} key={k.label}>
                  <Card size="small">
                    <Statistic title={k.label} value={k.value} />
                  </Card>
                </Col>
              ))}
            </Row>

            {/* FILTROS (colapsados por defecto) */}
            <Collapse defaultActiveKey={[]} style={{ marginBottom: 12 }}>
              <Collapse.Panel
                header="Filtros"
                key="filtros"
                extra={
                  <space>
                    <Button onClick={openEmailModalGastos} style={{marginRight:8}}>Compartir por correo</Button>
                    <Button onClick={handleDownloadPDF}>Descargar PDF</Button>
                  </space>
                }
              >
                <Card size="small">
                  <Row gutter={[12,12]} align="middle">
                    <Col xs={24} md={6}>
                      <label>Periodo</label>
                      <Select
                        style={{ width:'100%' }}
                        value={filtrosG.periodo}
                        onChange={(v)=>{ setFiltrosG(prev=>({...prev, periodo:v})); debouncedFetch('periodo',{periodo:v},250); }}
                        options={periodOptions}
                      />
                    </Col>
                    <Col xs={24} md={6}>
                      <label>AÃ±o</label>
                      <Input
                        type="number"
                        value={filtrosG.anio}
                        min={2000} max={2100}
                        onChange={(e)=>{ const val=Number(e.target.value||0); setFiltrosG(p=>({...p,anio:val})); debouncedFetch('anio',{anio:val},350); }}
                        onPressEnter={()=>fetchGastos()}
                      />
                    </Col>

                    {showMes && (
                      <Col xs={24} md={6}>
                        <label>Mes</label>
                        <Select
                          style={{ width:'100%' }}
                          value={filtrosG.mes}
                          onChange={(v)=>{ const val=Number(v); setFiltrosG(p=>({...p,mes:val})); debouncedFetch('mes',{mes:val},250); }}
                          options={monthOptions}
                        />
                      </Col>
                    )}

                    {showQuincena && (
                      <Col xs={24} md={6}>
                        <label>Quincena</label>
                        <Select
                          style={{ width:'100%' }}
                          value={filtrosG.quincena}
                          onChange={(v)=>{ const val=Number(v); setFiltrosG(p=>({...p,quincena:val})); debouncedFetch('quincena',{quincena:val},250); }}
                          options={[{label:'1 (1â15)', value:1},{label:'2 (16âfin de mes)', value:2}]}
                        />
                      </Col>
                    )}

                    {showFechaRef && (
                      <Col xs={24} md={6}>
                        <label>Fecha</label>
                        <Input
                          type="date"
                          value={filtrosG.fechaRef}
                          onChange={(e)=>{ const val=e.target.value; setFiltrosG(p=>({...p,fechaRef:val})); debouncedFetch('fechaRef',{fechaRef:val},300); }}
                          onPressEnter={()=>fetchGastos()}
                        />
                      </Col>
                    )}

                    <Col xs={24} md={8}>
                      <label>Sucursal</label>
                      <Select
                        allowClear
                        style={{ width:'100%' }}
                        placeholder="(todas)"
                        value={filtrosG.nombreSucursal || undefined}
                        onChange={(v)=>{ const val=v||''; setFiltrosG(p=>({...p,nombreSucursal:val})); debouncedFetch('sucursal',{nombreSucursal:val},200); }}
                        options={[{ label: '(todas)', value: '' }, ...sucursales.map(s => ({ label: s, value: s }))]}
                      />
                    </Col>

                    <Col xs={24} md={10}>
                      <label>Buscar</label>
                      <Input
                        placeholder="categorÃ­a, proveedor, mÃ©todo, descripciÃ³nâ¦"
                        value={filtrosG.q}
                        onChange={(e)=>{ const val=e.target.value; setFiltrosG(p=>({...p,q:val})); debouncedFetch('q',{q:val},500); }}
                        onPressEnter={()=>fetchGastos()}
                      />
                    </Col>

                    <Col xs={24} md={12}>
                      <label>TÃ­tulo de la barberÃ­a</label>
                      <Input
                        value={tituloBarberia}
                        onChange={(e)=>setTituloBarberia(e.target.value)}
                        placeholder="BarberÃ­a / Empresa"
                      />
                    </Col>

                    <Col xs={24}>
                      <Space>
                        <Button type="primary" onClick={()=>fetchGastos()} loading={loadingGastos}>Actualizar</Button>
                        <Button onClick={openEmailModalGastos} style={{marginRight:8}}>Compartir por correo</Button><Button onClick={handleDownloadPDF}>Descargar PDF</Button>
                        <Button onClick={resetFiltros} danger ghost>Borrar filtros</Button>
                      </Space>
                    </Col>
                  </Row>
                </Card>
              </Collapse.Panel>
            </Collapse>

            {/* KPIs duplicados (ocultos, conservados por si los usas luego) */}
            <Row gutter={[12,12]} style={{ display:'none' }}>
              {KPIsG.map(k => (
                <Col xs={24} md={8} key={'dup-'+k.label}>
                  <Card size="small">
                    <Statistic title={k.label} value={k.value} />
                  </Card>
                </Col>
              ))}
            </Row>

            {/* TABLA */}
            <Card size="small">
              <Table
                size="middle"
                rowKey={function(r,i){ return r && r.id ? `rg-${r.id}` : `rg-${i}`; }}
                loading={loadingGastos}
                dataSource={gastos}
                columns={colsGastos}
                pagination={{ pageSize: 10, showSizeChanger:true }}
                scroll={{ x: 1000 }}
              />
            </Card>
          </Tabs.TabPane>
        </Tabs>
      </div>
    );
  }

  (function mountReportes(){
    function mount(){
      const el = document.getElementById('ReportesView');
      if (!el){ setTimeout(mount, 50); return; }
      try { ReactDOM.unmountComponentAtNode(el); } catch(_) {}
      ReactDOM.render(<Reportes />, el);
    }
    if (document.readyState === 'loading'){
      document.addEventListener('DOMContentLoaded', mount);
    } else {
      mount();
    }
  })();
</script>
